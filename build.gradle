buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
	id "com.diffplug.spotless" version "6.19.0"
}
apply plugin: 'net.minecraftforge.gradle'

// Spotless config
spotless {
	java {
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		removeUnusedImports()
	}
}

version = '4.2.0'
group = 'vladaviedov.getinthebucketmod' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'getinthebucketmod'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'gitbm'

            mods {
                gitbm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'gitbm'

            mods {
                gitbm {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'gitbm'

            mods {
                gitbm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'


            mods {
                gitbm {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "gitbm",
                "Specification-Vendor"    : "Vladyslav Aviedov",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Vladyslav Aviedov",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

task autolang () {
	outputs.cacheIf { false }
	doLast {
		def langList = [ "en_gb", "ru_ru", "zh_cn", "zh_tw", "ja_jp", "fr_fr", "es_es", "de_de", "tr_tr" ]

		exec {
			workingDir "script/gitbm-autolang"
			commandLine "yarn", "install"
		}

		for (lang in langList) {
			exec {
				workingDir "script/gitbm-autolang"
				commandLine "yarn", "run", "gen", "--lang=${lang}", "--mcversion=${minecraft_version}"
			}
			exec {
				workingDir "script/gitbm-autolang"
				commandLine "cp", "out/${lang}.json", "../../src/main/resources/assets/gitbm/lang"
			}
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
